<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.3 on win32)" generated="20230601 23:19:08.060" rpa="false" schemaversion="3">
<suite id="s1" name="RFW-Practice" source="C:\Users\mani3359\Downloads\RFW-Practice">
<suite id="s1-s1" name="Regexp" source="C:\Users\mani3359\Downloads\RFW-Practice\Regexp">
<suite id="s1-s1-s1" name="TestCase with DB" source="C:\Users\mani3359\Downloads\RFW-Practice\Regexp\TestCase with DB.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20230601 23:19:08.849" level="INFO">Connecting using : pymysql.connect(db=regexp, user=root, passwd=root, host=localhost, port=4306, charset=None) </msg>
<status status="PASS" starttime="20230601 23:19:08.849" endtime="20230601 23:19:08.865"/>
</kw>
<test id="s1-s1-s1-t1" name="get regexps and compare" line="74">
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>update ${tableName} SET ${result_colname}='Pass' where ${columnList}[0]!='${emp_regexp}'</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:08.865" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Pass' where employee_Id!='\\d{1,6}' </msg>
<status status="PASS" starttime="20230601 23:19:08.865" endtime="20230601 23:19:08.873"/>
</kw>
<for flavor="IN">
<var>${curr_column}</var>
<value>@{columnList}</value>
<iter>
<var name="${curr_column}">employee_Id</var>
<kw name="Query" library="DatabaseLibrary">
<var>@{regexp_row}</var>
<arg>select ${curr_column} from ${tableName} limit 1</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:08.881" level="INFO">Executing : Query  |  select employee_Id from employeeDetails limit 1 </msg>
<msg timestamp="20230601 23:19:08.881" level="INFO">@{regexp_row} = [ ('\\d{1,6}',) ]</msg>
<status status="PASS" starttime="20230601 23:19:08.873" endtime="20230601 23:19:08.881"/>
</kw>
<kw name="Strip String" library="String">
<var>${regexp_txt}</var>
<arg>@{regexp_row}[0]</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.881" level="INFO">${regexp_txt} = \d{1,6}</msg>
<status status="PASS" starttime="20230601 23:19:08.881" endtime="20230601 23:19:08.881"/>
</kw>
<kw name="Replace String" library="String">
<var>${regexp_txt_with_escape}</var>
<arg>${regexp_txt}</arg>
<arg>search_for=\\</arg>
<arg>replace_with=\\\</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20230601 23:19:08.889" level="INFO">${regexp_txt_with_escape} = \d{1,6}</msg>
<status status="PASS" starttime="20230601 23:19:08.881" endtime="20230601 23:19:08.889"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${get_row}</var>
<arg>select ${curr_column} from ${tableName} where ${curr_column} != '${regexp_txt_with_escape}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:08.889" level="INFO">${get_row} = select employee_Id from employeeDetails where employee_Id != '\d{1,6}'</msg>
<status status="PASS" starttime="20230601 23:19:08.889" endtime="20230601 23:19:08.889"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{curr_row}</var>
<arg>${get_row}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:08.897" level="INFO">Executing : Query  |  select employee_Id from employeeDetails where employee_Id != '\d{1,6}' </msg>
<msg timestamp="20230601 23:19:08.900" level="INFO">@{curr_row} = [ ('\\d{1,6}',) | ('1',) | ('2',) | ('3',) | ('4',) | ('5ldsjl',) | ('6',) | ('7',) | ('8',) | ('9',) ]</msg>
<status status="PASS" starttime="20230601 23:19:08.889" endtime="20230601 23:19:08.900"/>
</kw>
<for flavor="IN">
<var>${row}</var>
<value>@{curr_row}</value>
<iter>
<var name="${row}">('\\d{1,6}',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.900" level="INFO">${curr_cell} = \d{1,6}</msg>
<status status="PASS" starttime="20230601 23:19:08.900" endtime="20230601 23:19:08.900"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.908"/>
</kw>
<msg timestamp="20230601 23:19:08.908" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.900" endtime="20230601 23:19:08.908"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.908"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.908"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.908"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.916"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.916"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.916"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.916"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.908" endtime="20230601 23:19:08.916"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.900" endtime="20230601 23:19:08.916"/>
</iter>
<iter>
<var name="${row}">('1',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.916" level="INFO">${curr_cell} = 1</msg>
<status status="PASS" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.916"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.916"/>
</kw>
<msg timestamp="20230601 23:19:08.916" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.916"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.916"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.924"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.924"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.916" endtime="20230601 23:19:08.924"/>
</iter>
<iter>
<var name="${row}">('2',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.924" level="INFO">${curr_cell} = 2</msg>
<status status="PASS" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<msg timestamp="20230601 23:19:08.924" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.924"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.932"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.932"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.932"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.932"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.932"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.932"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.932"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.932"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.924" endtime="20230601 23:19:08.932"/>
</iter>
<iter>
<var name="${row}">('3',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.932" level="INFO">${curr_cell} = 3</msg>
<status status="PASS" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.940"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<msg timestamp="20230601 23:19:08.940" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.940"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.940" endtime="20230601 23:19:08.948"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.932" endtime="20230601 23:19:08.948"/>
</iter>
<iter>
<var name="${row}">('4',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.950" level="INFO">${curr_cell} = 4</msg>
<status status="PASS" starttime="20230601 23:19:08.948" endtime="20230601 23:19:08.950"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.950"/>
</kw>
<msg timestamp="20230601 23:19:08.950" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.950"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.950"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.958"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.958"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.950" endtime="20230601 23:19:08.958"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.948" endtime="20230601 23:19:08.958"/>
</iter>
<iter>
<var name="${row}">('5ldsjl',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.958" level="INFO">${curr_cell} = 5ldsjl</msg>
<status status="PASS" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</kw>
<msg timestamp="20230601 23:19:08.958" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.958"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.958" endtime="20230601 23:19:08.966"/>
</iter>
<iter>
<var name="${row}">('6',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.966" level="INFO">${curr_cell} = 6</msg>
<status status="PASS" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.966"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<msg timestamp="20230601 23:19:08.974" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.974"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.966" endtime="20230601 23:19:08.974"/>
</iter>
<iter>
<var name="${row}">('7',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.974" level="INFO">${curr_cell} = 7</msg>
<status status="PASS" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.974"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.982"/>
</kw>
<msg timestamp="20230601 23:19:08.982" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.982"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.982"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.982"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.982"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.990"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.990"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.990"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.990"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.982" endtime="20230601 23:19:08.990"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.974" endtime="20230601 23:19:08.990"/>
</iter>
<iter>
<var name="${row}">('8',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.990" level="INFO">${curr_cell} = 8</msg>
<status status="PASS" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.990"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.990"/>
</kw>
<msg timestamp="20230601 23:19:08.990" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.990"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.990"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.998"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:08.998" endtime="20230601 23:19:08.999"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:08.998" endtime="20230601 23:19:08.999"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.999"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.999"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.990" endtime="20230601 23:19:08.999"/>
</iter>
<iter>
<var name="${row}">('9',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:08.999" level="INFO">${curr_cell} = 9</msg>
<status status="PASS" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<msg timestamp="20230601 23:19:08.999" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.999" endtime="20230601 23:19:08.999"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:08.999" endtime="20230601 23:19:09.007"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:08.999" endtime="20230601 23:19:09.007"/>
</branch>
<status status="PASS" starttime="20230601 23:19:08.999" endtime="20230601 23:19:09.007"/>
</if>
<status status="PASS" starttime="20230601 23:19:08.999" endtime="20230601 23:19:09.007"/>
</iter>
<status status="PASS" starttime="20230601 23:19:08.900" endtime="20230601 23:19:09.007"/>
</for>
<status status="PASS" starttime="20230601 23:19:08.873" endtime="20230601 23:19:09.007"/>
</iter>
<iter>
<var name="${curr_column}">employee_Name</var>
<kw name="Query" library="DatabaseLibrary">
<var>@{regexp_row}</var>
<arg>select ${curr_column} from ${tableName} limit 1</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.007" level="INFO">Executing : Query  |  select employee_Name from employeeDetails limit 1 </msg>
<msg timestamp="20230601 23:19:09.007" level="INFO">@{regexp_row} = [ ('^[A-Za-z ]{5,20}$',) ]</msg>
<status status="PASS" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</kw>
<kw name="Strip String" library="String">
<var>${regexp_txt}</var>
<arg>@{regexp_row}[0]</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.007" level="INFO">${regexp_txt} = ^[A-Za-z ]{5,20}$</msg>
<status status="PASS" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.007"/>
</kw>
<kw name="Replace String" library="String">
<var>${regexp_txt_with_escape}</var>
<arg>${regexp_txt}</arg>
<arg>search_for=\\</arg>
<arg>replace_with=\\\</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20230601 23:19:09.016" level="INFO">${regexp_txt_with_escape} = ^[A-Za-z ]{5,20}$</msg>
<status status="PASS" starttime="20230601 23:19:09.016" endtime="20230601 23:19:09.016"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${get_row}</var>
<arg>select ${curr_column} from ${tableName} where ${curr_column} != '${regexp_txt_with_escape}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.016" level="INFO">${get_row} = select employee_Name from employeeDetails where employee_Name != '^[A-Za-z ]{5,20}$'</msg>
<status status="PASS" starttime="20230601 23:19:09.016" endtime="20230601 23:19:09.016"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{curr_row}</var>
<arg>${get_row}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.016" level="INFO">Executing : Query  |  select employee_Name from employeeDetails where employee_Name != '^[A-Za-z ]{5,20}$' </msg>
<msg timestamp="20230601 23:19:09.016" level="INFO">@{curr_row} = [ ('Manish',) | ('Manish$%^&amp;*(',) | ('Manish',) | ('Manish',) | ('Manish',) | ('Manish',) | ('Manish',) | ('Mani',) | ('Manish',) ]</msg>
<status status="PASS" starttime="20230601 23:19:09.016" endtime="20230601 23:19:09.024"/>
</kw>
<for flavor="IN">
<var>${row}</var>
<value>@{curr_row}</value>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.024" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.024"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.024"/>
</kw>
<msg timestamp="20230601 23:19:09.024" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.024"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.024"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.032"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.032"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.032"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.032"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.032"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.032"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.032"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.032"/>
</iter>
<iter>
<var name="${row}">('Manish$%^&amp;*(',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.032" level="INFO">${curr_cell} = Manish$%^&amp;*(</msg>
<status status="PASS" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.032"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<msg timestamp="20230601 23:19:09.032" level="FAIL">'Manish$%^&amp;*(' does not match '^[A-Za-z ]{5,20}$'</msg>
<status status="FAIL" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.040"/>
</kw>
<msg timestamp="20230601 23:19:09.040" level="INFO">${regexp_match} = False</msg>
<status status="PASS" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.040"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.040" level="INFO">${result_sql_string} = Select validation_Results from employeeDetails where employee_Name='Manish$%^&amp;*(' AND validation_Results='Fail'</msg>
<status status="PASS" starttime="20230601 23:19:09.040" endtime="20230601 23:19:09.040"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.040" level="INFO">Executing : Execute SQL String  |  Select validation_Results from employeeDetails where employee_Name='Manish$%^&amp;*(' AND validation_Results='Fail' </msg>
<msg timestamp="20230601 23:19:09.048" level="INFO">${result_curr_cell} = None</msg>
<status status="PASS" starttime="20230601 23:19:09.040" endtime="20230601 23:19:09.048"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.048" level="INFO">${result_query} = update employeeDetails SET validation_Results='Fail' where employee_Name='Manish$%^&amp;*('</msg>
<status status="PASS" starttime="20230601 23:19:09.048" endtime="20230601 23:19:09.048"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.056" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Fail' where employee_Name='Manish$%^&amp;*(' </msg>
<status status="PASS" starttime="20230601 23:19:09.048" endtime="20230601 23:19:09.056"/>
</kw>
<status status="PASS" starttime="20230601 23:19:09.048" endtime="20230601 23:19:09.056"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.048" endtime="20230601 23:19:09.056"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.040" endtime="20230601 23:19:09.056"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.040" endtime="20230601 23:19:09.056"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.032" endtime="20230601 23:19:09.056"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.056" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.056" endtime="20230601 23:19:09.056"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.066" endtime="20230601 23:19:09.066"/>
</kw>
<msg timestamp="20230601 23:19:09.068" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.064" endtime="20230601 23:19:09.068"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.056" endtime="20230601 23:19:09.068"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.068" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.068"/>
</kw>
<msg timestamp="20230601 23:19:09.076" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.076"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.076"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.084"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.076" endtime="20230601 23:19:09.084"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.068" endtime="20230601 23:19:09.084"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.084" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.084"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.084"/>
</kw>
<msg timestamp="20230601 23:19:09.084" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.084"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.084"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.092"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.092"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.092"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.092"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.092"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.092"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.092"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.084" endtime="20230601 23:19:09.092"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.092" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.092"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.100"/>
</kw>
<msg timestamp="20230601 23:19:09.100" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.100"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.100" endtime="20230601 23:19:09.100"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.092" endtime="20230601 23:19:09.108"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.108" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.108"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.108"/>
</kw>
<msg timestamp="20230601 23:19:09.108" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.108"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.108"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.116"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.116"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.116"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.108" endtime="20230601 23:19:09.116"/>
</iter>
<iter>
<var name="${row}">('Mani',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.116" level="INFO">${curr_cell} = Mani</msg>
<status status="PASS" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<msg timestamp="20230601 23:19:09.116" level="FAIL">'Mani' does not match '^[A-Za-z ]{5,20}$'</msg>
<status status="FAIL" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.116"/>
</kw>
<msg timestamp="20230601 23:19:09.116" level="INFO">${regexp_match} = False</msg>
<status status="PASS" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.124"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.124" level="INFO">${result_sql_string} = Select validation_Results from employeeDetails where employee_Name='Mani' AND validation_Results='Fail'</msg>
<status status="PASS" starttime="20230601 23:19:09.124" endtime="20230601 23:19:09.124"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.133" level="INFO">Executing : Execute SQL String  |  Select validation_Results from employeeDetails where employee_Name='Mani' AND validation_Results='Fail' </msg>
<msg timestamp="20230601 23:19:09.133" level="INFO">${result_curr_cell} = None</msg>
<status status="PASS" starttime="20230601 23:19:09.131" endtime="20230601 23:19:09.133"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.141" level="INFO">${result_query} = update employeeDetails SET validation_Results='Fail' where employee_Name='Mani'</msg>
<status status="PASS" starttime="20230601 23:19:09.141" endtime="20230601 23:19:09.141"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.141" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Fail' where employee_Name='Mani' </msg>
<status status="PASS" starttime="20230601 23:19:09.141" endtime="20230601 23:19:09.141"/>
</kw>
<status status="PASS" starttime="20230601 23:19:09.133" endtime="20230601 23:19:09.141"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.133" endtime="20230601 23:19:09.141"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.124" endtime="20230601 23:19:09.141"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.124" endtime="20230601 23:19:09.141"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.116" endtime="20230601 23:19:09.149"/>
</iter>
<iter>
<var name="${row}">('Manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.149" level="INFO">${curr_cell} = Manish</msg>
<status status="PASS" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.149"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.149"/>
</kw>
<msg timestamp="20230601 23:19:09.149" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.149"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.157"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.157"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.149" endtime="20230601 23:19:09.157"/>
</iter>
<status status="PASS" starttime="20230601 23:19:09.024" endtime="20230601 23:19:09.157"/>
</for>
<status status="PASS" starttime="20230601 23:19:09.007" endtime="20230601 23:19:09.157"/>
</iter>
<iter>
<var name="${curr_column}">email</var>
<kw name="Query" library="DatabaseLibrary">
<var>@{regexp_row}</var>
<arg>select ${curr_column} from ${tableName} limit 1</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.157" level="INFO">Executing : Query  |  select email from employeeDetails limit 1 </msg>
<msg timestamp="20230601 23:19:09.157" level="INFO">@{regexp_row} = [ ('^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',) ]</msg>
<status status="PASS" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.157"/>
</kw>
<kw name="Strip String" library="String">
<var>${regexp_txt}</var>
<arg>@{regexp_row}[0]</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.165" level="INFO">${regexp_txt} = ^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$</msg>
<status status="PASS" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.165"/>
</kw>
<kw name="Replace String" library="String">
<var>${regexp_txt_with_escape}</var>
<arg>${regexp_txt}</arg>
<arg>search_for=\\</arg>
<arg>replace_with=\\\</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20230601 23:19:09.169" level="INFO">${regexp_txt_with_escape} = ^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$</msg>
<status status="PASS" starttime="20230601 23:19:09.165" endtime="20230601 23:19:09.169"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${get_row}</var>
<arg>select ${curr_column} from ${tableName} where ${curr_column} != '${regexp_txt_with_escape}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.169" level="INFO">${get_row} = select email from employeeDetails where email != '^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'</msg>
<status status="PASS" starttime="20230601 23:19:09.169" endtime="20230601 23:19:09.169"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{curr_row}</var>
<arg>${get_row}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.169" level="INFO">Executing : Query  |  select email from employeeDetails where email != '^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' </msg>
<msg timestamp="20230601 23:19:09.177" level="INFO">@{curr_row} = [ ('^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',) | ('manish@mail.com',) | ('manish@mail.com',) | ('manish',) | ('manish@mail.com',) | ('manish@mail.com',) | ('manishskdfhkmail.com',) | ('manish@...</msg>
<status status="PASS" starttime="20230601 23:19:09.169" endtime="20230601 23:19:09.177"/>
</kw>
<for flavor="IN">
<var>${row}</var>
<value>@{curr_row}</value>
<iter>
<var name="${row}">('^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.177" level="INFO">${curr_cell} = ^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$</msg>
<status status="PASS" starttime="20230601 23:19:09.177" endtime="20230601 23:19:09.177"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<msg timestamp="20230601 23:19:09.185" level="FAIL">'^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' does not match '^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'</msg>
<status status="FAIL" starttime="20230601 23:19:09.185" endtime="20230601 23:19:09.185"/>
</kw>
<msg timestamp="20230601 23:19:09.185" level="INFO">${regexp_match} = False</msg>
<status status="PASS" starttime="20230601 23:19:09.177" endtime="20230601 23:19:09.185"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.193" level="INFO">${result_sql_string} = Select validation_Results from employeeDetails where email='^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' AND validation_Results='Fail'</msg>
<status status="PASS" starttime="20230601 23:19:09.193" endtime="20230601 23:19:09.193"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.193" level="INFO">Executing : Execute SQL String  |  Select validation_Results from employeeDetails where email='^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' AND validation_Results='Fail' </msg>
<msg timestamp="20230601 23:19:09.201" level="INFO">${result_curr_cell} = None</msg>
<status status="PASS" starttime="20230601 23:19:09.193" endtime="20230601 23:19:09.201"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.201" level="INFO">${result_query} = update employeeDetails SET validation_Results='Fail' where email='^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'</msg>
<status status="PASS" starttime="20230601 23:19:09.201" endtime="20230601 23:19:09.201"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.209" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Fail' where email='^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' </msg>
<status status="PASS" starttime="20230601 23:19:09.201" endtime="20230601 23:19:09.209"/>
</kw>
<status status="PASS" starttime="20230601 23:19:09.201" endtime="20230601 23:19:09.209"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.201" endtime="20230601 23:19:09.209"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.185" endtime="20230601 23:19:09.209"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.185" endtime="20230601 23:19:09.209"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.177" endtime="20230601 23:19:09.209"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.209" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.209" endtime="20230601 23:19:09.209"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.217"/>
</kw>
<msg timestamp="20230601 23:19:09.217" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.209" endtime="20230601 23:19:09.217"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.217"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.217"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.225"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.225"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.225"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.225"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.225"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.217" endtime="20230601 23:19:09.225"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.209" endtime="20230601 23:19:09.225"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.225" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.225"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.225"/>
</kw>
<msg timestamp="20230601 23:19:09.225" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.225"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.225"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.233"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.233"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.225" endtime="20230601 23:19:09.233"/>
</iter>
<iter>
<var name="${row}">('manish',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.233" level="INFO">${curr_cell} = manish</msg>
<status status="PASS" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<msg timestamp="20230601 23:19:09.233" level="FAIL">'manish' does not match '^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'</msg>
<status status="FAIL" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.233"/>
</kw>
<msg timestamp="20230601 23:19:09.233" level="INFO">${regexp_match} = False</msg>
<status status="PASS" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.241"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.241" level="INFO">${result_sql_string} = Select validation_Results from employeeDetails where email='manish' AND validation_Results='Fail'</msg>
<status status="PASS" starttime="20230601 23:19:09.241" endtime="20230601 23:19:09.241"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.241" level="INFO">Executing : Execute SQL String  |  Select validation_Results from employeeDetails where email='manish' AND validation_Results='Fail' </msg>
<msg timestamp="20230601 23:19:09.249" level="INFO">${result_curr_cell} = None</msg>
<status status="PASS" starttime="20230601 23:19:09.241" endtime="20230601 23:19:09.249"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.249" level="INFO">${result_query} = update employeeDetails SET validation_Results='Fail' where email='manish'</msg>
<status status="PASS" starttime="20230601 23:19:09.249" endtime="20230601 23:19:09.249"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.257" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Fail' where email='manish' </msg>
<status status="PASS" starttime="20230601 23:19:09.249" endtime="20230601 23:19:09.257"/>
</kw>
<status status="PASS" starttime="20230601 23:19:09.249" endtime="20230601 23:19:09.257"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.249" endtime="20230601 23:19:09.257"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.241" endtime="20230601 23:19:09.257"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.241" endtime="20230601 23:19:09.257"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.233" endtime="20230601 23:19:09.257"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.257" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.257" endtime="20230601 23:19:09.257"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.257" endtime="20230601 23:19:09.266"/>
</kw>
<msg timestamp="20230601 23:19:09.266" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.257" endtime="20230601 23:19:09.268"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.257" endtime="20230601 23:19:09.268"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.268" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.268"/>
</kw>
<msg timestamp="20230601 23:19:09.276" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.276"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.276"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.268" endtime="20230601 23:19:09.276"/>
</iter>
<iter>
<var name="${row}">('manishskdfhkmail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.276" level="INFO">${curr_cell} = manishskdfhkmail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.284"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<msg timestamp="20230601 23:19:09.284" level="FAIL">'manishskdfhkmail.com' does not match '^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'</msg>
<status status="FAIL" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.284"/>
</kw>
<msg timestamp="20230601 23:19:09.284" level="INFO">${regexp_match} = False</msg>
<status status="PASS" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.284"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.284" level="INFO">${result_sql_string} = Select validation_Results from employeeDetails where email='manishskdfhkmail.com' AND validation_Results='Fail'</msg>
<status status="PASS" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.284"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.292" level="INFO">Executing : Execute SQL String  |  Select validation_Results from employeeDetails where email='manishskdfhkmail.com' AND validation_Results='Fail' </msg>
<msg timestamp="20230601 23:19:09.292" level="INFO">${result_curr_cell} = None</msg>
<status status="PASS" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.292"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.292" level="INFO">${result_query} = update employeeDetails SET validation_Results='Fail' where email='manishskdfhkmail.com'</msg>
<status status="PASS" starttime="20230601 23:19:09.292" endtime="20230601 23:19:09.292"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20230601 23:19:09.292" level="INFO">Executing : Execute SQL String  |  update employeeDetails SET validation_Results='Fail' where email='manishskdfhkmail.com' </msg>
<status status="PASS" starttime="20230601 23:19:09.292" endtime="20230601 23:19:09.300"/>
</kw>
<status status="PASS" starttime="20230601 23:19:09.292" endtime="20230601 23:19:09.300"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.292" endtime="20230601 23:19:09.300"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.300"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.284" endtime="20230601 23:19:09.300"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.276" endtime="20230601 23:19:09.300"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.300" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.300" endtime="20230601 23:19:09.300"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</kw>
<msg timestamp="20230601 23:19:09.308" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.300" endtime="20230601 23:19:09.308"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.308"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.300" endtime="20230601 23:19:09.308"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.308" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.316"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.316"/>
</kw>
<msg timestamp="20230601 23:19:09.316" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.316"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.316"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.316"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.316"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.324"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.324"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.324"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.316" endtime="20230601 23:19:09.324"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.308" endtime="20230601 23:19:09.324"/>
</iter>
<iter>
<var name="${row}">('manish@mail.com',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.324" level="INFO">${curr_cell} = manish@mail.com</msg>
<status status="PASS" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<msg timestamp="20230601 23:19:09.324" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.324"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.333"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.333"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.324" endtime="20230601 23:19:09.333"/>
</iter>
<status status="PASS" starttime="20230601 23:19:09.177" endtime="20230601 23:19:09.333"/>
</for>
<status status="PASS" starttime="20230601 23:19:09.157" endtime="20230601 23:19:09.333"/>
</iter>
<iter>
<var name="${curr_column}">mobile_Number</var>
<kw name="Query" library="DatabaseLibrary">
<var>@{regexp_row}</var>
<arg>select ${curr_column} from ${tableName} limit 1</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.333" level="INFO">Executing : Query  |  select mobile_Number from employeeDetails limit 1 </msg>
<msg timestamp="20230601 23:19:09.333" level="INFO">@{regexp_row} = [ ('^[0-9]{10}$',) ]</msg>
<status status="PASS" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</kw>
<kw name="Strip String" library="String">
<var>${regexp_txt}</var>
<arg>@{regexp_row}[0]</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.333" level="INFO">${regexp_txt} = ^[0-9]{10}$</msg>
<status status="PASS" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.333"/>
</kw>
<kw name="Replace String" library="String">
<var>${regexp_txt_with_escape}</var>
<arg>${regexp_txt}</arg>
<arg>search_for=\\</arg>
<arg>replace_with=\\\</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20230601 23:19:09.341" level="INFO">${regexp_txt_with_escape} = ^[0-9]{10}$</msg>
<status status="PASS" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.341"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${get_row}</var>
<arg>select ${curr_column} from ${tableName} where ${curr_column} != '${regexp_txt_with_escape}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 23:19:09.341" level="INFO">${get_row} = select mobile_Number from employeeDetails where mobile_Number != '^[0-9]{10}$'</msg>
<status status="PASS" starttime="20230601 23:19:09.341" endtime="20230601 23:19:09.341"/>
</kw>
<kw name="Query" library="DatabaseLibrary">
<var>@{curr_row}</var>
<arg>${get_row}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230601 23:19:09.341" level="INFO">Executing : Query  |  select mobile_Number from employeeDetails where mobile_Number != '^[0-9]{10}$' </msg>
<msg timestamp="20230601 23:19:09.349" level="INFO">@{curr_row} = [ ('8098120434',) | ('8098120435',) | ('8098120436',) | ('8098120437',) | ('8098120438',) | ('8098120439',) | ('8098120440',) | ('8122222222',) | ('8098120442',) ]</msg>
<status status="PASS" starttime="20230601 23:19:09.341" endtime="20230601 23:19:09.349"/>
</kw>
<for flavor="IN">
<var>${row}</var>
<value>@{curr_row}</value>
<iter>
<var name="${row}">('8098120434',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.349" level="INFO">${curr_cell} = 8098120434</msg>
<status status="PASS" starttime="20230601 23:19:09.349" endtime="20230601 23:19:09.349"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.349" endtime="20230601 23:19:09.349"/>
</kw>
<msg timestamp="20230601 23:19:09.349" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.349" endtime="20230601 23:19:09.349"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.349" endtime="20230601 23:19:09.357"/>
</iter>
<iter>
<var name="${row}">('8098120435',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.357" level="INFO">${curr_cell} = 8098120435</msg>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<msg timestamp="20230601 23:19:09.357" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.357"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.365"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.365"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.357" endtime="20230601 23:19:09.365"/>
</iter>
<iter>
<var name="${row}">('8098120436',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.365" level="INFO">${curr_cell} = 8098120436</msg>
<status status="PASS" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.365"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.373"/>
</kw>
<msg timestamp="20230601 23:19:09.373" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.373"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.365" endtime="20230601 23:19:09.373"/>
</iter>
<iter>
<var name="${row}">('8098120437',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.373" level="INFO">${curr_cell} = 8098120437</msg>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<msg timestamp="20230601 23:19:09.373" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.373"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.383"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.383"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.373" endtime="20230601 23:19:09.383"/>
</iter>
<iter>
<var name="${row}">('8098120438',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.383" level="INFO">${curr_cell} = 8098120438</msg>
<status status="PASS" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.383"/>
</kw>
<msg timestamp="20230601 23:19:09.383" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.391"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.383" endtime="20230601 23:19:09.391"/>
</iter>
<iter>
<var name="${row}">('8098120439',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.391" level="INFO">${curr_cell} = 8098120439</msg>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<msg timestamp="20230601 23:19:09.391" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.391"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.399"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.399"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.399"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.391" endtime="20230601 23:19:09.399"/>
</iter>
<iter>
<var name="${row}">('8098120440',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.399" level="INFO">${curr_cell} = 8098120440</msg>
<status status="PASS" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.399"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.407"/>
</kw>
<msg timestamp="20230601 23:19:09.407" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.407"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.399" endtime="20230601 23:19:09.407"/>
</iter>
<iter>
<var name="${row}">('8122222222',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.407" level="INFO">${curr_cell} = 8122222222</msg>
<status status="PASS" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.407"/>
</kw>
<msg timestamp="20230601 23:19:09.417" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.417"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.407" endtime="20230601 23:19:09.417"/>
</iter>
<iter>
<var name="${row}">('8098120442',)</var>
<kw name="Strip String" library="String">
<var>${curr_cell}</var>
<arg>@{row}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20230601 23:19:09.417" level="INFO">${curr_cell} = 8098120442</msg>
<status status="PASS" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.417"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${regexp_match}</var>
<arg>should match regexp</arg>
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${curr_cell}</arg>
<arg>${regexp_txt_with_escape}</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.425"/>
</kw>
<msg timestamp="20230601 23:19:09.425" level="INFO">${regexp_match} = True</msg>
<status status="PASS" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.425"/>
</kw>
<if>
<branch type="IF" condition="'${regexp_match}' == 'False'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_sql_string}</var>
<arg>Select ${result_colname} from ${tableName} where ${curr_column}='${curr_cell}' AND ${result_colname}='Fail'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.425"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${result_curr_cell}</var>
<arg>${result_sql_string}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.425"/>
</kw>
<if>
<branch type="IF" condition="'${result_curr_cell}'=='${NULL}'">
<kw name="Set Variable" library="BuiltIn">
<var>${result_query}</var>
<arg>update ${tableName} SET ${result_colname}='Fail' where ${curr_column}='${curr_cell}'</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.425"/>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<arg>${result_query}</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<status status="NOT RUN" starttime="20230601 23:19:09.433" endtime="20230601 23:19:09.433"/>
</kw>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.433"/>
</branch>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.433"/>
</if>
<status status="NOT RUN" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.433"/>
</branch>
<status status="PASS" starttime="20230601 23:19:09.425" endtime="20230601 23:19:09.433"/>
</if>
<status status="PASS" starttime="20230601 23:19:09.417" endtime="20230601 23:19:09.433"/>
</iter>
<status status="PASS" starttime="20230601 23:19:09.349" endtime="20230601 23:19:09.433"/>
</for>
<status status="PASS" starttime="20230601 23:19:09.333" endtime="20230601 23:19:09.433"/>
</iter>
<status status="PASS" starttime="20230601 23:19:08.873" endtime="20230601 23:19:09.433"/>
</for>
<doc>This keyword checks regexps for all the database</doc>
<status status="PASS" starttime="20230601 23:19:08.865" endtime="20230601 23:19:09.433"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20230601 23:19:09.433" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230601 23:19:09.433" endtime="20230601 23:19:09.441"/>
</kw>
<doc>This file has to verify the format of each data cell</doc>
<status status="PASS" starttime="20230601 23:19:08.124" endtime="20230601 23:19:09.441"/>
</suite>
<status status="PASS" starttime="20230601 23:19:08.124" endtime="20230601 23:19:09.441"/>
</suite>
<status status="PASS" starttime="20230601 23:19:08.068" endtime="20230601 23:19:09.449"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="RFW-Practice">RFW-Practice</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Regexp">RFW-Practice.Regexp</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1-s1" name="TestCase with DB">RFW-Practice.Regexp.TestCase with DB</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
